class SyncPusher{constructor(e){if(!e?.key)throw Error("Configuration error: 'key' is required.");if(!e?.api)throw Error("Configuration error: 'api' is required.");this.config={key:e.key,api:e.api,pusherjs:e?.pusherjs||"https://js.pusher.com/8.2.0/pusher.min.js",cluster:e?.cluster||"ap1",channel:"presence-cache-"+(e?.channel||"sync"),method:e?.method||"POST",retries:e?.retries||3,delay:e?.delay||1e3,logToConsole:e?.logToConsole||!1},this.initPusher()}log(e,i="log"){this.config.logToConsole&&(console[i]?.(e)||console.log(e))}initPusher(){if(window.Pusher)this.setupPusher();else{let e=document.createElement("script");e.src=this.config.pusherjs,e.onload=()=>this.setupPusher(),e.onerror=()=>{throw this.log("Failed to load Pusher script.","error"),Error("Pusher script could not be loaded.")},document.body.appendChild(e)}}setupPusher(){let e=new Pusher(this.config.key,{cluster:this.config.cluster});e.logToConsole=this.config.logToConsole;let i=e.connection;i.bind("initialized",()=>this.connection.initialized()),i.bind("connecting",()=>this.connection.connecting()),i.bind("connected",()=>this.connection.connected()),i.bind("unavailable",()=>this.connection.unavailable()),i.bind("failed",()=>this.connection.failed()),i.bind("disconnected",()=>this.connection.disconnected()),i.bind("error",e=>this.connection.error(e)),i.bind("state_change",e=>this.connection.stateChange(e));let n=e.subscribe(this.config.channel);n.bind("pusher:subscription_succeeded",e=>this.connected(e)),n.bind("pusher:member_added",e=>this.joined(e)),n.bind("pusher:member_removed",e=>this.left(e)),n.bind("pusher:subscription_error",e=>this.error(e)),n.bind("pusher:cache_miss",()=>this.init()),n.bind("sync",e=>this.sync(e))}async fetch(e,i,n=this.config.retries,t=this.config.delay){try{let s=await fetch(e,i);if(!s.ok)throw Error(`HTTP error! Status: ${s.status}`);return await s.text()}catch(o){if(n>0)return this.log(`Retrying... (${this.config.retries-n+1})`),await new Promise(e=>setTimeout(e,t)),this.fetch(e,i,n-1,t);throw this.log(`Fetch failed: ${o.message}`,"error"),o}}connection={initialized:()=>{this.log("Pusher connection initialized.")},connecting:()=>{this.log("Pusher connecting...")},connected:()=>{this.log("Pusher connected.")},unavailable:()=>{this.log("Pusher unavailable.")},failed:()=>{this.log("Pusher failed.")},disconnected:()=>{this.log("Pusher disconnected.")},error:e=>{this.log(`Pusher error: ${e.message}`,"error")},stateChange:e=>{this.log(`Pusher state changed: ${e}`)}};connected(e){this.log(`Subscribed to channel: ${this.config.channel}`),this.log(`${e.count} member(s) in channel.`),e.each(function(e){this.log(`MemberId: ${e.id})`),this.log(`MemberInfo: ${e.info}`)}),this.log(`MyId: ${e.me.id}`),this.log(`MyInfo: ${e.me.info}`)}joined(e){this.log(`Member joined, Id: ${e.id})`),this.log(`Member Info: ${e.info}`)}left(e){this.log(`Member left, Id: ${e.id})`),this.log(`Member Info: ${e.info}`)}error(e){this.log(`Connection Error: ${e.error}`,"error")}init(){this.log("Initiating cache..."),this.push([])}sync(e){console.log("Received sync data:",JSON.stringify(e))}push(e){let i=new URL(this.config.api),n;return"GET"===this.config.method?(n={method:"GET"},i.searchParams.append("channel",this.config.channel),i.searchParams.append("event","sync"),i.searchParams.append("data",encodeURIComponent(e))):n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({channel:this.config.channel,event:"sync",data:e})},this.fetch(i,n).then(e=>(this.log(`Data pushed successfully: ${e}`),e)).catch(e=>{throw this.log(`Push failed: ${e.message}`,"error"),e})}}